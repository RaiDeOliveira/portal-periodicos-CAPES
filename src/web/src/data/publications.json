[
  {
    "id": 1,
    "title": "Empirical Study of Agile Software Development Methodologies: A Comparative Analysis",
    "year": "2024",
    "source": "Asian Journal of Research in Computer Science",
    "volume": "17",
    "issue": "5",
    "language": "Inglês",
    "doi": "10.9734/ajrcos/2024/v17i5436 ",
    "issn": "2581-8260 ",
    "authors": "Samuel Gbli Tetteh ",
    "topics": "Agile Software Development in Software Engineering",
    "summary": "The comparative analysis of software development models, also called the Software Development Life Cycle (SDLC), is an everyday discourse among software engineers, reflecting the dynamic nature of the field. Within this realm, various software development methodologies, such as prototyping, spiral development, and Rapid Action Development, have been established and recognised for their unique approaches to software creation. In recent years, Agile methodologies have emerged as prominent contenders in software development, offering flexibility, adaptability, and efficiency in delivering high-quality software within designated timeframes. Among the array of Agile methodologies, including Dynamic System Development Method (DSDM), Scrum, Feature-Driven Development (FDD), Extreme Programming (XP), Kanban, Adaptive Software Development (ASD), Mendix, Lean, and Crystal, several have garnered significant attention in the software development community. Specifically, ASD, DSDM, XP, FDD, Kanban, and Scrum have emerged as prominent choices among Agile methods utilised by software developers. This study conducts a comprehensive examination and comparison of these six Agile software models, aiming to elucidate their functionalities, strengths, and weaknesses. The findings of this comparative analysis seek to provide valuable insights for software industries, enabling informed decision-making when selecting software development models for upcoming projects. By understanding each Agile methodology's nuanced differences and capabilities, software developers and industry stakeholders can align their project requirements with the most suitable software development approach, ultimately optimising project outcomes and software quality. ",
    "link": "https://journalajrcos.com/index.php/AJRCOS/article/view/436",
    "citations": 7,
    "readers": 112,
    "qualis": "A1"
  },
  {
    "id": 2,
    "title": "Software Testing With Large Language Models: Survey, Landscape, and Vision",
    "year": "2024",
    "source": "IEEE Computer Society",
    "volume": "50",
    "issue": "4",
    "language": "Inglês",
    "doi": "10.1109/tse.2024.3368208",
    "issn": "2326-3881",
    "authors": "Junjie Wang, Yuchao Huang, Chunyang Chen, Zhe Liu, Song Wang, Junjie Wang",
    "topics": "Software Reliability Assessment and Prediction",
    "summary": "Pre-trained large language models (LLMs) have recently emerged as a breakthrough technology in natural language processing and artificial intelligence, with the ability to handle large-scale datasets and exhibit remarkable performance across a wide range of tasks. Meanwhile, software testing is a crucial undertaking that serves as a cornerstone for ensuring the quality and reliability of software products. As the scope and complexity of software systems continue to grow, the need for more effective software testing techniques becomes increasingly urgent, making it an area ripe for innovative approaches such as the use of LLMs. This paper provides a comprehensive review of the utilization of LLMs in software testing. It analyzes 102 relevant studies that have used LLMs for software testing, from both the software testing and LLMs perspectives. The paper presents a detailed discussion of the software testing tasks for which LLMs are commonly used, among which test case preparation and program repair are the most representative. It also analyzes the commonly used LLMs, the types of prompt engineering that are employed, as well as the accompanied techniques with these LLMs. It also summarizes the key challenges and potential opportunities in this direction. This work can serve as a roadmap for future research in this area, highlighting potential avenues for exploration, and identifying gaps in our current understanding of the use of LLMs in software testing.",
    "link": "https://ieeexplore.ieee.org/document/10440574",
    "citations": 14,
    "readers": 167,
    "qualis": "A1"
  },
  {
    "id": 3,
    "title": "Fundamentals of Software Engineering",
    "year": "2023",
    "source": "Springer International Publishing",
    "volume": "49",
    "issue": "4",
    "language": "Inglês",
    "doi": "10.1007/978-3-031-26212-8_1 ",
    "issn": "1868-095X ",
    "authors": "Gerard O’Regan ",
    "topics": "Software Reliability Assessment and Prediction ",
    "summary": "The first chapter presents a broad overview of software engineering, and the birth of the discipline was at the Garmisch conference in Germany in the late 1960s. We discuss various software lifecycles and the phases in software development. We discuss requirements gathering and specification, software design, implementation, testing, and maintenance. The lightweight Agile methodology is introduced, and it has become very popular in industry. Mathematics may potentially assist software engineers in delivering high-quality software products that are safe to use, and the extent to which mathematics should be employed remains a topic of active debate. ",
    "link": "https://link.springer.com/chapter/10.1007/978-3-031-26212-8_1",
    "citations": 7,
    "readers": 112,
    "qualis": "A1"
  },
  {
    "id": 4,
    "title": "A Comprehensive Investigation of the Impact of Class Overlap on Software Defect Prediction",
    "year": "2023",
    "source": " IEEE Computer Society",
    "volume": "49",
    "issue": "4",
    "language": "Inglês",
    "doi": "10.9734/ajrcos/2024/v17i5436 ",
    "issn": "2326-3881",
    "authors": "Lina Gong, Haoxiang Zhang, Jingxuan Zhang, Mingqiang Wei, Zhiqiu Huang ",
    "topics": "Agile Software Development in Software Engineering",
    "summary": "Software Defect Prediction (SDP) is one of the most vital and cost-efficient operations to ensure the software quality. However, there exists the phenomenon of class overlap in the SDP datasets (i.e., defective and non-defective modules are similar in terms of values of metrics), which hinders the performance as well as the use of SDP models. Even though efforts have been made to investigate the impact of removing overlapping technique on the performance of SDP, many open issues are still challenging yet unknown. Therefore, we conduct an empirical study to comprehensively investigate the impact of class overlap on SDP. Specifically, we first propose an overlapping instances identification approach by analyzing the class distribution in the local neighborhood of a given instance. We then investigate the impact of class overlap and two common overlapping instance handling techniques on the performance and the interpretation of seven representative SDP models. Through an extensive case study on 230 diversity datasets, we observe that: i) 70.0% of SDP datasets contain overlapping instances; ii) different levels of class overlap have different impacts on the performance of SDP models; iii) class overlap affects the rank of the important feature list of SDP models, particularly the feature lists at the top 2 and top 3 ranks; IV) Class overlap handling techniques could statistically significantly improve the performance of SDP models trained on datasets with over 12.5% overlap ratios. We suggest that future work should apply our KNN method to identify the overlap ratios of datasets before building SDP models. ",
    "link": "https://ieeexplore.ieee.org/document/9944157",
    "citations": 7,
    "readers": 112,
    "qualis": "A1"
  }
]
